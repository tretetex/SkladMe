﻿<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ output extension=".cs" #>
// <auto-generated />

using SkServ.Model.RequestParams;

namespace SkServ.Utils
{
    partial class RequestParameters
    {
<#
	var path = Path.Combine(Directory.GetParent(Host.ResolvePath("")).FullName, @"Model", "RequestParams");
        var files = Directory.GetFiles(path, "*.cs", SearchOption.AllDirectories).ToList();

        var types = new List<string>();

	foreach (var file in files)
	{
		var text = File.ReadAllText(file);
        const string pattern = @"ToRequestParameters\((\w+)\s\w+\)";

        var matches = Regex.Matches(text, pattern, RegexOptions.Multiline);

        types.AddRange(matches.Cast<object>().Select(match => Regex.Replace(match.ToString(), pattern, @"$1", RegexOptions.Multiline)));
	}

	foreach (var type in types.OrderBy(s => s))
	{
#>
		/// <summary>
        /// Преобразование класса <see cref="<#= type #>"/> в RequestParameters
        /// </summary>
        /// <param name="p">Параметр.</param>
        /// <returns>
        /// Результат преобразования.
        /// </returns> 
		public static implicit operator RequestParameters(<#= type #> p)
		{
            return <#= type #>.ToRequestParameters(p);
        }

<#
	}
#>
	}
}